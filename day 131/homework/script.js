// 1)დაწერე ფუნქცია, რომელიც შეამოწმებს, არის თუ არა ერთი ნაკრები მეორის ქვნენაკრები.
// მაგალითი:
// არისქვნენაკრები(new Set([1, 2]), new Set([1, 2, 3])); 
// // შედეგი: true 

// function checKS(a, b){
//     for(let i of a) {
//         if(i.has(b)){
//             return false
//         } else {
//             return true
//         }
//     }
// }


// console.log(checKS(new Set([1, 2]), new Set([1, 2, 3])))

// 2)რუკის ინვერტირება
// დაწერე ფუნქცია, რომელიც გასაღებებს და მნიშვნელობებს შეცვლის ადგილმონაცვლეობით რუკაში. თუ მნიშვნელობები მეორდება, დაიტოვე ბოლო გასაღები.
// მაგალითი:
// ინვერტირებულრუკა(new Map([['a', 1], ['b', 2], ['c', 1]])); 
// // შედეგი: Map {1 => 'c', 2 => 'b'}

// function ch(a, b){
//     const my_map = new Map()

//     for(let [key, value] of a) {
//         my_map.set(value, key)
//     }
//     return my_map
// }
// console.log(ch(new Map([['a', 1], ['b', 2], ['c', 1]])))


// 3) მაქსიმალური მნიშვნელობის გასაღებების პოვნა
// დაწერე ფუნქცია, რომელიც იპოვის ყველა გასაღებს რუკაში, რომელთაც აქვთ მაქსიმალური მნიშვნელობა.
// მაგალითი:
// მაქსიმალურისგასაღებები(new Map([['a', 5], ['b', 3], ['c', 5]])); 
// // შედეგი: ['a', 'c']

// function findMax(a, b){
//     const my_map = new Map()

//     for(let i of a) {
//         if(b > i) {
//             return my_map.set(i)
//         }
//         return my_map
//     }
// }

// console.log(findMax(new Map([['a', 5], ['b', 3], ['c', 5]])))